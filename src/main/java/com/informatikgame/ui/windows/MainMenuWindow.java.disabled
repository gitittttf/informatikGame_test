package com.informatikgame.ui.windows;

import java.util.Arrays;

import com.googlecode.lanterna.TerminalSize;
import com.googlecode.lanterna.TextColor;
import com.googlecode.lanterna.graphics.TextGraphics;
import com.googlecode.lanterna.gui2.BasicWindow;
import com.googlecode.lanterna.gui2.Button;
import com.googlecode.lanterna.gui2.Component;
import com.googlecode.lanterna.gui2.EmptySpace;
import com.googlecode.lanterna.gui2.LinearLayout;
import com.googlecode.lanterna.gui2.MultiWindowTextGUI;
import com.googlecode.lanterna.gui2.Panel;
import com.googlecode.lanterna.gui2.Window;
import com.googlecode.lanterna.input.KeyStroke;
import com.informatikgame.ui.ScreenManager;

/**
 * Main Menu using Native Lanterna GUI Windows with preserved animations
 */
public class MainMenuWindow extends BasicWindow {
    
    private MultiWindowTextGUI textGUI;
    private AnimatedBackgroundPanel backgroundPanel;
    
    // Animation state (preserved from original)
    private int animationFrame = 0;
    private long lastUpdateTime = System.currentTimeMillis();
    
    // Original title art and animations (exact copies)
    private final String[] titleArt = {
        " ▓█████▄  █    ██  ███▄    █   ▄████ ▓█████  ▒█████   ███▄    █ ",
        " ▒██▀ ██▌ ██  ▓██▒ ██ ▀█   █  ██▒ ▀█▒▓█   ▀ ▒██▒  ██▒ ██ ▀█   █ ",
        " ░██   █▌▓██  ▒██░▓██  ▀█ ██▒▒██░▄▄▄░▒███   ▒██░  ██▒▓██  ▀█ ██▒",
        " ░▓█▄   ▌▓▓█  ░██░▓██▒  ▐▌██▒░▓█  ██▓▒▓█  ▄ ▒██   ██░▓██▒  ▐▌██▒",
        " ░▒████▓ ▒▒█████▓ ▒██░   ▓██░░▒▓███▀▒░▒████▒░ ████▓▒░▒██░   ▓██░"
    };
    
    private final String subtitle = "Von Paul, Benedikt und Simon";
    
    public MainMenuWindow(MultiWindowTextGUI textGUI) {
        super("Informatik Game");
        this.textGUI = textGUI;
        
        // Configure window for fullscreen
        setHints(Arrays.asList(Window.Hint.FULL_SCREEN, Window.Hint.NO_DECORATIONS));
        
        setupUI();
        
        // Start animation timer
        startAnimationTimer();
    }
    
    private void setupUI() {
        // Create main panel with animated background
        backgroundPanel = new AnimatedBackgroundPanel();
        
        // Create menu panel
        Panel menuPanel = new Panel(new LinearLayout(LinearLayout.Direction.VERTICAL));
        menuPanel.addComponent(new EmptySpace(new TerminalSize(1, 15))); // Space for title art
        
        // Menu buttons (preserved from original)
        menuPanel.addComponent(new Button("► Neues Spiel starten", () -> startNewGame()));
        menuPanel.addComponent(new Button("► Spiel fortsetzen", () -> continueGame()));
        menuPanel.addComponent(new Button("► Einstellungen", () -> openSettings()));
        menuPanel.addComponent(new Button("► Anleitung", () -> showHelp()));
        menuPanel.addComponent(new Button("► Credits", () -> showCredits()));
        menuPanel.addComponent(new Button("► Spiel beenden", () -> exitGame()));
        
        backgroundPanel.addComponent(menuPanel);
        setComponent(backgroundPanel);
    }
    
    private void startAnimationTimer() {
        // Create a background thread to update animations
        Thread animationThread = new Thread(() -> {
            while (isVisible()) {
                try {
                    Thread.sleep(100); // 100ms update interval (same as original)
                    updateAnimation();
                } catch (InterruptedException e) {
                    break;
                }
            }
        });
        animationThread.setDaemon(true);
        animationThread.start();
    }
    
    private void updateAnimation() {
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastUpdateTime > 100) {
            animationFrame++;
            lastUpdateTime = currentTime;
            // Trigger redraw
            if (backgroundPanel != null) {
                backgroundPanel.invalidate();
            }
        }
    }
    
    // Menu Actions (preserved from original)
    private void startNewGame() {
        // Switch to gameplay window
        close();
        // TODO: Open GameplayWindow
    }
    
    private void continueGame() {
        // TODO: Load game state
    }
    
    private void openSettings() {
        // TODO: Open SettingsWindow
    }
    
    private void showHelp() {
        // TODO: Open HelpWindow
    }
    
    private void showCredits() {
        // TODO: Open CreditsWindow
    }
    
    private void exitGame() {
        close();
        System.exit(0);
    }
    
    /**
     * Custom panel that renders animated background and title art
     * (preserves all original animation logic)
     */
    private class AnimatedBackgroundPanel extends Panel {
        
        // Particle system (exact copy from original)
        private Particle[] particles;
        
        public AnimatedBackgroundPanel() {
            super();
            initializeParticles();
        }
        
        private void initializeParticles() {
            particles = new Particle[30]; // Same count as original
            for (int i = 0; i < particles.length; i++) {
                particles[i] = new Particle();
                // Distribute initially across screen
                particles[i].y = (int) (Math.random() * 40); // Approximate screen height
            }
        }
        
        @Override
        protected void drawTo(com.googlecode.lanterna.gui2.TextGUIGraphics graphics) {
            TerminalSize size = getSize();
            
            // Update and render particles (exact same logic as original)
            for (Particle p : particles) {
                p.update(size);
                if (p.x < size.getColumns() && p.y < size.getRows()) {
                    graphics.setForegroundColor(p.color);
                    graphics.setCharacter(p.x, p.y, p.symbol);
                }
            }
            
            // Render animated title art (exact same logic as original)
            renderTitleArt((TextGraphics) graphics, size);
            
            // Draw child components
            super.drawTo(graphics);
        }
        
        private void renderTitleArt(TextGraphics graphics, TerminalSize size) {
            // Title with Glitch-Effect (exact same logic as original)
            int titleY = 5;
            for (int i = 0; i < titleArt.length; i++) {
                // Random glitch effect
                if (animationFrame % 30 == 0 && Math.random() < 0.1) {
                    // Glitch: shift line slightly
                    int offset = (int) (Math.random() * 3) - 1;
                    graphics.setForegroundColor(new TextColor.RGB(153, 153, 0));
                    drawCentered(graphics, titleArt[i], titleY + i + offset, size);
                } else {
                    // Normal: green color with pulsing
                    int brightness = 150 + (int) (Math.sin(animationFrame * 0.2 + i) * 70);
                    graphics.setForegroundColor(new TextColor.RGB(0, brightness, 0));
                    drawCentered(graphics, titleArt[i], titleY + i, size);
                }
            }
            
            // Subtitle with typewriter effect (exact same logic as original)
            graphics.setForegroundColor(ScreenManager.SECONDARY_COLOR);
            String displaySubtitle = subtitle;
            if (animationFrame < subtitle.length()) {
                displaySubtitle = subtitle.substring(0, animationFrame);
            }
            drawCentered(graphics, displaySubtitle, titleY + titleArt.length + 2, size);
        }
        
        private void drawCentered(TextGraphics graphics, String text, int y, TerminalSize size) {
            int x = (size.getColumns() - text.length()) / 2;
            graphics.putString(Math.max(0, x), y, text);
        }
    }
    
    /**
     * Particle class (exact copy from original MainMenuScreen)
     */
    private class Particle {
        int x, y;
        char symbol;
        TextColor color;
        int speed;
        
        Particle() {
            reset(new TerminalSize(120, 40)); // Default size
        }
        
        void reset(TerminalSize size) {
            if (size.getColumns() > 0 && size.getRows() > 0) {
                x = (int) (Math.random() * size.getColumns());
                y = 0;
                speed = 1 + (int) (Math.random() * 3);
                
                // Various symbols for atmosphere (same as original)
                char[] symbols = {'░', '▒', '▓', '█', '*', '·', '•'};
                symbol = symbols[(int) (Math.random() * symbols.length)];
                
                // Green tones for Matrix effect (same as original)
                int green = 50 + (int) (Math.random() * 150);
                color = new TextColor.RGB(0, green, 0);
            }
        }
        
        void update(TerminalSize size) {
            y += speed;
            if (y >= size.getRows()) {
                reset(size);
            }
        }
    }
}